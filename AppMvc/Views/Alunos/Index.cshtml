@*@model IEnumerable<AppMvc.Models.Aluno>*@

@model PagedList.IPagedList<AppMvc.Models.Aluno>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Gestão de Alunos";
}

@if (TempData["Mensagem"] != null)
{
    <div class="alert alert-success">
        <button type="button" class="close" data-dismiss="alert">x</button>
        <h3>@TempData["Mensagem"].ToString()</h3>
    </div>
}

<h2>Gestão de Alunos</h2>

<div>
    <a href="@Url.Action("Create")" class="btn btn-primary">Novo Aluno</a>
</div>
<br />
<br />
@*@using (Html.BeginForm())*@

@using (Html.BeginForm("Index", "Alunos", FormMethod.Get))
{
    <p>
        Procura por Nome: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}
<br />
<br />
<table class="table table-striped table-hover">
    <tr>
        <th>
            @*@Html.DisplayNameFor(model => model.Nome)*@
            @Html.ActionLink("Nome", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })

        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.Email)*@
            Email
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.CPF)*@
            CPF
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.DataMatricula)*@
            Data de Matricula
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.Ativo)*@
            Ativo
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Nome)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CPF)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DataMatricula)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Ativo)
            </td>
            <td>
                <a href="@Url.Action("Edit", "Alunos", new { id = item.Id})" class="btn btn-warning">
                    <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>
                </a>
                <a href="@Url.Action("Details", "Alunos", new { id = item.Id})" class="btn btn-primary">
                    <span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>
                </a>
                <a href="@Url.Action("Delete", "Alunos", new { id = item.Id})" class="btn btn-danger">
                    <span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span>
                </a>

            </td>
        </tr>
    }


</table>

Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))